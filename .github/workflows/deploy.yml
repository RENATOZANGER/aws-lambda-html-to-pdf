name: Deploy Lambda Function

env:
    REGION: "us-east-1"
    NAME_BUCKET_TERRAFORM: "lambda-html-to-pdf-remote-state"
    NAME_BUCKET_ZIP: "my-lambda-bucket-zip-htmltopdf"
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
on:
  push:
    branches:
      - main

jobs:
  read-yaml:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.destroy }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
          
      - name: read-yaml-file
        uses: pietrobolcato/action-read-yaml@1.0.0
        id: read_action_js
        with:
          config: ${{ github.workspace }}/destroy.yml
          
      - name: use-yaml-file
        id: step1
        run: |
            echo "::set-output name=destroy::${{ steps.read_action_js.outputs['destroy'] }}"

  destroy:
    needs: read-yaml
    runs-on: ubuntu-latest
    if: needs.read-yaml.outputs.output1 == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
    
      - name: Terraform Init
        run: terraform init
        working-directory: ./infra
    
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./infra
    
      - name: Delete all objects and versions from the bucket terraform
        run: |
          aws s3api delete-objects --bucket ${{ env.NAME_BUCKET_TERRAFORM }} \
          --delete "$(aws s3api list-object-versions --bucket ${{ env.NAME_BUCKET_TERRAFORM }} | \
          jq '{Objects: [.Versions[] | {Key:.Key, VersionId : .VersionId}], Quiet: false}')"
        
      - name: Delete the bucket terraform
        run: |
          aws s3api delete-bucket --bucket ${{ env.NAME_BUCKET_TERRAFORM }} --region ${{ env.REGION }}

      - name: Delete all objects and versions from the bucket zip
        run: |
          aws s3api delete-objects --bucket ${{ env.NAME_BUCKET_ZIP }} \
          --delete "$(aws s3api list-object-versions --bucket ${{ env.NAME_BUCKET_ZIP }} | \
          jq '{Objects: [.Versions[] | {Key:.Key, VersionId : .VersionId}], Quiet: false}')"
        
      - name: Delete the bucket zip
        run: |
          aws s3api delete-bucket --bucket ${{ env.NAME_BUCKET_ZIP }} --region ${{ env.REGION }}

  Create_buckets:
    needs: read-yaml
    if: needs.read-yaml.outputs.output1 == 'false'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}
    
    - name: Check if bucket terraform exists
      id: check_bucket_terraform
      run: |
        if aws s3api head-bucket --bucket ${{ env.NAME_BUCKET_TERRAFORM }} 2>/dev/null; then
            echo "::set-output name=bucket_exists::true"
        else
            echo "::set-output name=bucket_exists::false"
        fi
    
    - name: Create bucket terraform if not exists
      if: steps.check_bucket_terraform.outputs.bucket_exists == 'false'
      run: |
        aws s3api create-bucket --bucket ${{ env.NAME_BUCKET_TERRAFORM }} --region ${{ env.REGION }}

    - name: Check if bucket zip exists
      id: check_bucket_zip
      run: |
        if aws s3api head-bucket --bucket ${{ env.NAME_BUCKET_ZIP }} 2>/dev/null; then
            echo "::set-output name=bucket_exists::true"
        else
            echo "::set-output name=bucket_exists::false"
        fi
    
    - name: Create bucket zip if not exists
      if: steps.check_bucket_zip.outputs.bucket_exists == 'false'
      run: |
        aws s3api create-bucket --bucket ${{ env.NAME_BUCKET_ZIP }} --region ${{ env.REGION }}
  
  build:
    needs: 
      - read-yaml
      - Create_buckets
    if: needs.read-yaml.outputs.output1 == 'false'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r ./app/requirements.txt
    
    - name: Copy code and dependencies
      run: |
        mkdir -p temp/app
        cp -r app/* temp/app/
        cp -r /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/* temp/

    - name: Zip files
      run: |
        cd temp
        zip -r ../code_and_dependencies.zip .

    - name: Upload code_and_dependencies.zip to S3
      run: |
        aws s3 cp code_and_dependencies.zip s3://${{ env.NAME_BUCKET_ZIP }}/lambda_function.zip
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.REGION }}
    
    - name: Download wkhtmltox package
      run: |
            wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-4/wkhtmltox-0.12.6-4.amazonlinux2_lambda.zip
            mv wkhtmltox-0.12.6-4.amazonlinux2_lambda.zip wkhtmltopdf.zip
    
    - name: Upload wkhtmltopdf layer to S3
      run: |
            aws s3 cp wkhtmltopdf.zip s3://${{ env.NAME_BUCKET_ZIP }}/wkhtmltopdf.zip
      env:
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.REGION }}
  

  deploy:
    runs-on: ubuntu-latest
    needs: 
        - read-yaml
        - Create_buckets
        - build
    if: needs.read-yaml.outputs.output1 == 'false'
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
        
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra
        
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra
        
    - name: Terraform Apply
      run: terraform apply -auto-approve || echo "Terraform apply failed"
      working-directory: ./infra
      id: apply
        
      
  failure:
    runs-on: ubuntu-latest
    needs: 
      - read-yaml
      - Create_buckets
      - build
    if: needs.read-yaml.outputs.output1 == 'false' && failure()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
            
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
      
      - name: Handle Failure

        run: echo "Rollback ou mitigação poderia ser iniciada aqui"